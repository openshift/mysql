##Básicamente no hemos cambiado nada. Hemos añadido los scripts en /mysql-container_mysql-wp/8.0/root/usr/sshare/container-scripts/mysql/backup.sh y restore.sh para hacer copias de seguridad y restaurlas en /var/lib/mysql/backup. Para crear este directorio añadimos a /mysql-container_mysql-wp/root-common/usr/libexec/container-setup.sh "mkdir -p /var/lib/mysql/backup".


Tenemos para trabajar con la imagen básicamente dar valor a las siguientes variables de entorno:
MYSQL_OPERATIONS_USER=opuser
MYSQL_OPERATIONS_PASSWORD=oppass
MYSQL_DATABASE=opdb
MYSQL_USER=user
MYSQL_PASSWORD=pass
MYSQL_ROOT_PASSWORD=pass

Compilamos la imagen-builder:

make build TARGET=centos7 VERSIONS=8.0

$ make clean TARGET=centos7  VERSIONS=8.0
/usr/bin/env bash common/clean.sh 8.0
make[1]: No se hace nada para 'clean-hook'.
$ make clean-images TARGET=centos7  VERSIONS=8.0
/usr/bin/env bash common/clean.sh 8.0


Para testear la imagen:


docker run -d -e MYSQL_USER=user -e MYSQL_PASSWORD=pass -e MYSQL_DATABASE=db  -p 3306:3306 9a3861823af7

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
e3980c84d9e9        3f6cf193f925        "container-entrypoin…"   4 seconds ago       Up 3 seconds        0.0.0.0:3306->3306/tcp   hungry_margulis
$ 


$ docker exec -it e3980c84d9e9 bash



bash-4.2$ ls /var/lib/mysql/data
#innodb_temp	     ca.pem	       ibdata1		   server-cert.pem
201909200407.sql.gz  client-cert.pem   ibtmp1		   server-key.pem
auto.cnf	     client-key.pem    mysql		   sys
binlog.000001	     db		       mysql.ibd	   undo_001
binlog.000002	     f971571fb19d.pid  mysql_upgrade_info  undo_002
binlog.index	     ib_buffer_pool    performance_schema
bitacora.txt	     ib_logfile0       private_key.pem
ca-key.pem	     ib_logfile1       public_key.pem
bash-4.2$ 


Como podemos observar binlog cambia cada vez que cambia la base de datos por lo que nos permite monitorizala mediante el log binario con browsersync.


Bien ya tenemos al imagen. Vamos a subirla a nuestro openshift. Para ello comprobamos si existen y que contienen en su caso estos archivos de nuestro workstation:

$ cat /etc/docker/daemon.json 
{
"insecure-registries" : ["172.30.0.0/16","172.30.1.1","docker-registry-default.apps.srv.world"]
}


Como vemos nos contiene "docker-registry-default.apps.srv.world" por lo que no nos rechazará las operaciones por no tener correctamente configurado el certificado.



$ cat  /home/emilio/.docker/config.json 
{
	"auths": {
		"docker-registry-default.apps.srv.world": {
			"auth": "ZGV2OmtSNnBUR1VLYjJaWXFzMmh0YXF6N3YtblFpcmFHT290eXc3ZkVxMkcwMzg="
		},
		"docker.io": {
			"auth": "c2FteXVub2RvczpQb2Nhc3MxMjM="
		},
		"https://index.docker.io/v1/": {
			"auth": "c2FteXVub2RvczpQb2Nhc3MxMjM="
		},
		"registry.connect.redhat.com": {
			"auth": "anVsaW9lbWlsaW86UG9jYXNzMTIz"
		},
		"registry.redhat.io": {
			"auth": "SnVsaW9FbWlsaW86UG9jYXNzMTIz"
		}
	},
	"HttpHeaders": {
		"User-Agent": "Docker-Client/18.09.9 (linux)"
	}
}

Que como vemos tiene la autorización para operar con "docker-registry-default.apps.srv.world". No obstante yo no se si esta autorización es temporal (token temporal) por lo que deberíamos loegearnos de nuevo mediante:

Si estamos trabajando con el usuario dev, en principio debemos darle privilegios para trabajar con el registro docker de openshift:

$ oc policy add-role-to-user registry-editor dev


Una vez otorgados los privilegios, obtenemos el token como usuario dev:

$ oc whoami -t
LEAA28KHvitBRJ6HAtfxW7f5g4j-w2S2Tr83iCA8tQo

y nos logeamos en el registro interno:

$ docker login -u dev https://docker-registry-default.apps.srv.world
Password: (LEAA28KHvitBRJ6HAtfxW7f5g4j-w2S2Tr83iCA8tQo)
Login Succeeded

creándose la correspondiente entrada en el archivo “ /home/emilio/.docker/config.json ”.


Para poder subir la imagen, etiquetamos la imagen con el nombre del registro y además con el proyecto al que queremos que pertenezca. Si queremos que sea usada por todos los proyectos debemos subirla al proyecto openshift.


$ docker images
REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
<none>                           <none>              3ac7f80dc683        About an hour ago   569MB
centos/s2i-core-centos7          latest              25edcea7e7c4        37 hours ago        236MB
bitnami/wordpress                5.2.1               850d89931397        3 months ago        415MB
openshift/origin-node            v3.11               37389629b6aa        7 months ago        1.17GB
openshift/origin-control-plane   v3.11               5cd0e1999c8f        7 months ago        825MB
openshift/origin-hyperkube       v3.11               19adb51612ce        7 months ago        506MB
openshift/origin-pod             v3.11               a9a4af491b5b        7 months ago        258MB
openshift/origin-hypershift      v3.11               7ad80d384403        7 months ago        546MB
openshift/origin-cli             v3.11               5ccda8312cfe        7 months ago        381MB
$ 



la etiquetamos:

$ docker tag 3ac7f80dc683 docker-registry-default.apps.srv.world/imagen-mysql/mysql-wp:v.0


$ docker images
REPOSITORY                                                     TAG                 IMAGE ID            CREATED             SIZE
docker-registry-default.apps.srv.world/imagen-mysql/mysql-wp   v.0                 3ac7f80dc683        About an hour ago   569MB


Ahora para subirla a openshift basta con:

$ docker push docker-registry-default.apps.srv.world/imagen-mysql/mysql-wp:v.0



$ oc  describe is/mysql-wp 
Name:			mysql-wp
Namespace:		imagen-mysql
Created:		About a minute ago
Labels:			<none>
Annotations:		<none>
Docker Pull Spec:	docker-registry.default.svc:5000/imagen-mysql/mysql-wp
Image Lookup:		local=false
Unique Images:		1
Tags:			1

v.0
  no spec tag

  * docker-registry.default.svc:5000/imagen-mysql/mysql-wp@sha256:976c76b757a02e7359f1272ffab54c7e7f282f4393e2cd48484ef87a969f6561
      About a minute ago
$ 




Nos queda crear el desplegue mediante statefull y con volumen nfs:


1-. En principio el comando:

$ oc new-build mysql:8.0~https://github.com/sclorg/mysql-container.git --name my-mysql-rhel7 --context-dir=examples/extend-image --env MYSQL_OPERATIONS_USER=opuser --env MYSQL_OPERATIONS_PASSWORD=oppass --env MYSQL_DATABASE=opdb --env MYSQL_USER=user --env MYSQL_PASSWORD=pass   --env MYSQL_ROOT_PASSWORD=passs --strategy=source


no funciona en openshift con 8.0 por lo que voy a compilar y subir la imagen stream.


2-. Creamos la imagen builder:

    a-. fork a https://github.com/sclorg/mysql-container quedandonos https://github.com/samyunodos/mysql-container

    b-. $ git clone --recursive git@github.com:samyunodos/mysql-container.git
        $ cd mysql-container
        $ git submodule update --init
        $ git remote add upstream git@github.com:sclorg/s2i-php-container.git
        $ git pull upstream master
        $ git checkout mysql-wp (si queremos modificar la imagen builder)
        $ make build TARGET=centos7 VERSIONS=8.0 (compilamos la imagen builder (  centos/s2i-core-centos7 -- make clean)
        $ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
e3980c84d9e9        3f6cf193f925        "container-entrypoin…"   4 seconds ago       Up 3 seconds        0.0.0.0:3306->3306/tcp   hungry_margulis
        $ oc policy add-role-to-user registry-editor dev
        $ oc whoami -t
LEAA28KHvitBRJ6HAtfxW7f5g4j-w2S2Tr83iCA8tQo
        $ docker login -u dev https://docker-registry-default.apps.srv.world
Password: (LEAA28KHvitBRJ6HAtfxW7f5g4j-w2S2Tr83iCA8tQo)
Login Succeeded
        $ docker tag 3ac7f80dc683 docker-registry-default.apps.srv.world/openshift/mysql-80-centos7:8.0
        $ docker push docker-registry-default.apps.srv.world/openshift/mysql-80-centos7:8.0
        $ oc describe 
$ oc describe is/mysql-80-centos7 -n openshift
Name:			mysql-80-centos7
Namespace:		openshift
Created:		12 hours ago
Labels:			<none>
Annotations:		<none>
Docker Pull Spec:	docker-registry.default.svc:5000/openshift/mysql-80-centos7
Image Lookup:		local=false
Unique Images:		1
Tags:			1

8.0
  no spec tag

  * docker-registry.default.svc:5000/openshift/mysql-80-centos7@sha256:0bfa59b436753dba1f52dae605db18188f8ca5247d21f00705ba0341f5b275a0
      12 hours ago

Como vemos ya tenemos la imagen stream subida a openshift. Debe de estar en el projecto opneshift para ser usada. Esta imagen no tiene ningún source en /opt/app-root/src.

Nos funciona el comando con user pero no como root:

$ mysql -u user -p
Enter password: (pass)


mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| db                 |
| information_schema |
+--------------------+
2 rows in set (0.00 sec)

mysql> USE db;
Database changed


Vemos que no existe niguna tabla creada.

mysql> CREATE TABLE Persons (     PersonID int,     LastName varchar(255),     FirstName varchar(255),     Address varchar(255),     City varchar(255) );


mysql> show tables;
+--------------+
| Tables_in_db |
+--------------+
| Persons      |
+--------------+
1 row in set (0.01 sec)
>>>>>>> 64c18168b49b4340a99aa2c3fe75603eebeb35dd

==========================================================================================



$ git clone git@github.com:samyunodos/mysql-container.git

$ cd mysql-container/

$ git checkout -b mysql-wp
Cambiado a nueva rama 'mysql-wp'

$ emacs 8.0/Dockerfile &


$ emacs s2i-common/bin/assemble &


$ git add --all

$ git commit -m all

$ git push origin mysql-wp


$ oc new-build git@github.com:samyunodos/mysql-container/#mysql-wp --context-dir=../examples/extend-image/ --name=mysql-builder



$ oc new-app mysql:8.0~https://github.com/sclorg/mysql-container.git \
	--name my-mysql-centos7 \
	--context-dir=examples/extend-image \
	--env MYSQL_OPERATIONS_USER=opuser \
	--env MYSQL_OPERATIONS_PASSWORD=oppass \
	--env MYSQL_DATABASE=opdb \
	--env MYSQL_USER=user \
	--env MYSQL_PASSWORD=pass \
  --strategy=source

$ oc new-build git@github.com:samyunodos/mysql-container/#mysql-wp --context-dir=examples/extend-image/ --name=mysql-builder



### $ oc new-app mysql:8.0~https://github.com/sclorg/mysql-container.git \
### 	--name my-mysql-centos7 \
### 	--context-dir=examples/extend-image \
### 	--env MYSQL_OPERATIONS_USER=opuser \
### 	--env MYSQL_OPERATIONS_PASSWORD=oppass \
### 	--env MYSQL_DATABASE=opdb \
### 	--env MYSQL_USER=user \
### 	--env MYSQL_PASSWORD=pass \
###   --strategy=source


### oc new-app centos/msyql-80-centos7:8.0~https://github.com/sclorg/mysql-container.git \
### 	--name my-mysql-rhel7 \
### 	--context-dir=examples/extend-image \
### 	--env MYSQL_OPERATIONS_USER=opuser \
### 	--env MYSQL_OPERATIONS_PASSWORD=oppass \
### 	--env MYSQL_DATABASE=opdb \
### 	--env MYSQL_USER=user \
### 	--env MYSQL_PASSWORD=pass \
###   --env MYSQL_ROOT_PASSWORD=passs


### $ oc new-build mysql:8.0~https://github.com/sclorg/mysql-container.git --name my-mysql-centos7 --context-dir=examples/extend-image --env MYSQL_OPERATIONS_USER=opuser --env MYSQL_OPERATIONS_PASSWORD=oppass --env MYSQL_DATABASE=opdb --env MYSQL_USER=user --env MYSQL_PASSWORD=pass   --env MYSQL_ROOT_PASSWORD=passs --strategy=source

$ oc new-app mysql:8.0~https://github.com/sclorg/mysql-container.git --name my-mysql-centos7 --context-dir=examples/replica --env MYSQL_OPERATIONS_USER=opuser --env MYSQL_OPERATIONS_PASSWORD=oppass  --env MYSQL_MASTER_USER=master --env MYSQL_MASTER_PASSWORD=passmaster --env MYSQL_PASSWORD=pass    --env MYSQL_ROOT_PASSWORD=passroot --strategy=source



$ oc process -n project  -f examples/replica/mysql_replica.json -p MYSQL_MASTER_PASSWORD=passmaster -p MYSQL_PASSWORD=pass -p MYSQL_ROOT_PASSWORD=passroot -p VOLUME_CAPACITY=8Gi  -p IMAGEN_STREAM="mysql-80-centos7@sha256:0bfa59b436753dba1f52dae605db18188f8ca5247d21f00705ba0341f5b275a0" | oc create -f -






$ oc process -n project -f examples/replica/mysql_replica.json | oc delete -f -


$ oc describe is/mysql-80-centos7 -n openshift

$ oc apply -f os-nfs-mysql-pv01.yaml 
$ oc apply -f os-nfs-mysql-pv02.yaml

$ oc process -f mysql_replica.json -p MYSQL_MASTER_PASSWORD=passmaster -p MYSQL_PASSWORD=pass -p MYSQL_ROOT_PASSWORD=passroot -p VOLUME_CAPACITY=8Gi  -p IMAGEN_STREAM="docker-registry.default.svc:5000/openshift/mysql-80-centos7:8.0" | oc create -f -


$ oc process -f mysql_replica.json | oc delete -f -

$ oc delete -f os-nfs-mysql-pv01.yaml 
$ oc delete -f os-nfs-mysql-pv02.yaml


$ oc describe pod/mysql-master-1-bpdzg
Name:               mysql-master-1-bpdzg
Namespace:          imagen-mysql
Priority:           0
PriorityClassName:  <none>
Node:               node01.srv.world/192.168.122.101
Start Time:         Sat, 21 Sep 2019 22:26:50 +0200
Labels:             deployment=mysql-master-1
                    deploymentconfig=mysql-master
                    name=mysql-master
Annotations:        openshift.io/deployment-config.latest-version=1
                    openshift.io/deployment-config.name=mysql-master
                    openshift.io/deployment.name=mysql-master-1
                    openshift.io/scc=restricted
Status:             Running
IP:                 10.130.0.83
Controlled By:      ReplicationController/mysql-master-1
Containers:
  server:
    Container ID:  docker://7a1844e1d35789494e6351e57b5f3e5fb41c143d6e6f52014f69758d572cbd41
    Image:         docker-registry.default.svc:5000/openshift/mysql-80-centos7:8.0
    Image ID:      docker-pullable://docker-registry.default.svc:5000/openshift/mysql-80-centos7@sha256:0bfa59b436753dba1f52dae605db18188f8ca5247d21f00705ba0341f5b275a0
    Port:          3306/TCP
    Host Port:     0/TCP
    Args:
      run-mysqld-master
    State:          Running
      Started:      Sat, 21 Sep 2019 22:27:02 +0200
    Ready:          True
    Restart Count:  0
    Environment:
      MYSQL_MASTER_USER:      master
      MYSQL_MASTER_PASSWORD:  passmaster
      MYSQL_USER:             user
      MYSQL_PASSWORD:         pass
      MYSQL_DATABASE:         userdb
      MYSQL_ROOT_PASSWORD:    passroot
    Mounts:
      /var/lib/mysql/data from mysql-master-data (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-9vpp8 (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  mysql-master-data:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  mysql-master
    ReadOnly:   false
  default-token-9vpp8:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-9vpp8
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  node-role.kubernetes.io/compute=true
Tolerations:     <none>
Events:
  Type    Reason     Age   From                       Message
  ----    ------     ----  ----                       -------
  Normal  Scheduled  12m   default-scheduler          Successfully assigned imagen-mysql/mysql-master-1-bpdzg to node01.srv.world
  Normal  Pulling    12m   kubelet, node01.srv.world  pulling image "docker-registry.default.svc:5000/openshift/mysql-80-centos7:8.0"
  Normal  Pulled     12m   kubelet, node01.srv.world  Successfully pulled image "docker-registry.default.svc:5000/openshift/mysql-80-centos7:8.0"
  Normal  Created    12m   kubelet, node01.srv.world  Created container
  Normal  Started    12m   kubelet, node01.srv.world  Started container

## replication controller
$ oc scale rc/mysql-master-1 --replicas=2
replicationcontroller/mysql-master-1 scaled


## deploymentconfig
$ oc get dc
NAME           REVISION   DESIRED   CURRENT   TRIGGERED BY
mysql-master   1          1         1         config
mysql-slave    1          1         1         config
$ oc scale --replicas=2 dc mysql-slave
deploymentconfig.apps.openshift.io/mysql-slave scaled
$ 



## nombre del host para poder entrar como root

bash-4.2$ mysql -u root -h mysql-master-1-bpdzg -p

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| userdb             |
+--------------------+
5 rows in set (0.00 sec)

mysql> USE userdb;
Database changed
mysql> show tables;
Empty set (0.01 sec)

mysql>
